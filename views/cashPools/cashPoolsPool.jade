extends ../templates/layout

mixin getToggleButtonTooltip(name, type)
    - if (type == 'closed')

mixin toggleButton(active, tooltipText)
    .toogle.slider
        - if (active === true)
            button.btn.toggle.button.active(type='submit', data-toggle='tooltip', data-placement='bottom', title=tooltipText)
                p
                    i.fa.fa-check
        - else
            button.btn.toggle.button.inactive(type='submit', data-toggle='tooltip', data-placement='bottom', title=tooltipText)
                p
                    i.fa.fa-close
                    
mixin statusIcon(active)
    - if (active === true)
        i.fa.fa-check
    - else
        i.fa.fa-close

mixin balanceEntry(name)
    tr(class=sumData[name]<=0 ? 'balance positive' : 'balance negative')
        td.balance.name
            = name
        td.balance.balance
            - if (sumData[name] <= 0)
                = sumData[name].toFixed(2) * -1
            - else
                = sumData[name].toFixed(2)
        td.balance.closed
            - if (name === username && pool.status === 'open')
                form(action=pool.id + '/toggleUserState?username=' + username + '&state=closed', method="post", class="inline")
                    +toggleButton(pool.participants[name].closed, pool.participants[name].closed === false ? "Mark pool as closed" : "Mark pool as open")
            - else
                +statusIcon(pool.participants[name].closed)
        td.balance.settled
            -if (pool.status === 'open')
                p -
            -else if (name === username && pool.status === 'closed')
                form(action=pool.id + '/toggleUserState?username=' + username + '&state=settled', method="post", class="inline")
                    +toggleButton(pool.participants[name].settled, pool.participants[name].settled === false ? "Mark pool as settled" : "Mark pool as closed but not yet settled")
            - else
                +statusIcon(pool.participants[name].settled)

block content
    <!-- Table of the pool entries --> 
    .container
        .panel.panel-default
            .panel-heading Current Cash Items #{pool.startDate} - #{pool.endDate} Status: #{pool.status}
            .panel-body
            table
                tr.table-header
                    td.cash-name-column Name
                    td.cash-description-column Description
                    td.cash-date-column Date
                    td.cash-value-column Value
                - var total = 0.0;
                - for (var i = 0; i < pool.items.length; i++) {
                    - var currentItem = pool.items[i]
                    tr
                        td.cash-name-column
                            = currentItem.username
                        td.cash-description-column
                            = currentItem.description
                        td.cash-date-column
                            = currentItem.date
                        td.cash-value-column
                            = currentItem.value
                    - total += parseFloat(currentItem.value)
                - }
                tr
                    td.cash-name-column
                    td.cash-description-column
                        b Total:
                    td.cash-date-column 
                    td.cash-value-column
                        b
                            = total
                    
    <!-- Add new entries to the pool -->
    if (pool.status == "open")
        .container
            .panel.panel-primary
                .panel-heading Add a new transaction
                .panel-body 
                    form(action="/cashPools/" + pool.id, method="post")
                        .row
                            .col-sm-2
                                .form-group
                                    label(for='name')
                                        h5 name
                                    select.form-control(type='text', id='username', name='username')
                                        - for (var name in pool.participants) {
                                            -if (name == username)
                                                option(selected='selected')
                                                    = name
                                            - else
                                                option
                                                    = name
                                        - }
                            .col-sm-6
                                .form-group
                                    label(for='description')
                                        h5 description
                                    input.form-control(type='text', id='description', name='description', required)
                            .col-sm-2
                                .form-group
                                    label(for='date')
                                        h5 date
                                    input.form-control(type='text', id='datepicker', name='date', pattern='^\\d{2}\\.\\d{2}\\.\\d{4}', required)
                            .col-sm-2
                                .form-group
                                    label(for='value')
                                        h5 value
                                    input.form-control(type='text', pattern="^\\d+\\.\\d{2}", id='value', name='value', required)
                        .row
                            .col-sm-10
                            .col-sm-2
                                button.btn.btn-primary.btn-block(type='submit') Submit
    <!-- Table with the calculated sums for the user -->
    .container
        .panel.panel-default
            .panel-heading Overview how much everyone needs to pay (red) or gets back (green)
            .panel-body
                table
                    tr.table-header
                        td.balance.name name
                        td.balance.balance balance
                        td.balance.closed closed
                        td.balance.settled settled
                    - for (var name in sumData) {
                        +balanceEntry(name)
                    - }
                

block css
    link(href='/css/bootstrap-datepicker.min.css', rel='stylesheet')
                
block scripts
    script(type='text/javascript', src='/js/bootstrap-datepicker.min.js')
    script.
        $(function() {
            
            var endDate = "#{pool.endDate}".split('.').reverse();
            endDate = new Date(endDate);

            var startDate = "#{pool.startDate}".split('.').reverse();
            startDate = new Date(startDate);
            
            if (#{pool.enforceTimeBounds}) {
                $('#datepicker').datepicker({ 
                        format: 'dd.mm.yyyy',
                        startDate: startDate,
                        endDate: endDate
                }).datepicker("setDate", new Date());
            } else {
                $('#datepicker').datepicker({ 
                        format: 'dd.mm.yyyy'
                }).datepicker("setDate", new Date());  
            }
        });
